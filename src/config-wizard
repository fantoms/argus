#!/usr/local/bin/perl
# -*- perl -*-

# Copyright (c) 2011
# Author: Jeff Weisberg <jaw @ tcp4me.com>
# Created: 2011-Nov-01 14:18 (EDT)
# Function: 
#
# $Id$

use lib 'bin';
require 'conf.pl';
use strict;

my @SCAN = (
    [ 'TCP/HTTP', 80 ],
    [ 'TCP/SSH',  22 ],
    [ 'TCP/SMTP', 25 ],
    [ 'TCP/FTP',  21 ],

);


# ask about users. create users file

# ask about addr blocks
#  fping
#  scan each host


print "Let's set up some users.\n";

my @user;
while(1){
    my $u = ask('Username (or hit return if done): ');
    last unless $u;
    my $p = ask('Password: ');
    my $g = ask('Group [root,staff,user]: ', 'staff', qr/^root|staff|user$/);

    my $ep = $p ? encrypt_pass($p) : 'any';

    push @user, "$u\t$ep\tTop\t$g\n";
}

print "Excellent. Now let's figure out what to monitor\n";
print "Enter in netblocks as 192.168.0.0/16, hit return when done\n";

my @block;
while(1){
    my $b = ask('Netblock: ', undef, qr/^((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2})|)$/);
    last unless $b;
    push @block, $b;
}

print STDERR "Starting network scan...\n";

my @host;
for my $b (@block){
    open(my $fping, '-|', 'fping', '-a', '-A', '-g', $b);

    while(<$fping>){
        chop;
        next unless /^\S+$/;
        push @host, $_;

        spin();
    }
}

print STDERR "Starting port scan...\n";

my %monitor;
for my $host (@host){
    for my $scan (@SCAN){
        next unless scan($host, $scan);
        push @{$monitor{$host}}, $scan;
    }
}



################################################################

my $spinn;
sub spin {

    my $c = ['/', '-', '\\', '|']->[ $spinn++ % 4 ];
    print STDERR $c,"\b";
}

sub ask {
    my $prompt  = shift;
    my $default = shift;
    my $valid   = shift;

    while(1){
        print STDERR $prompt;
        chop( my $ans = <> );
        $ans ||= $default;

        return $ans unless $valid;

        return $ans if $ans =~ /$valid/;
        print STDERR "invalid\n";
    }
}

sub encrypt_pass {
    my $pw = shift;

    my @a = ('a'..'z', 'A'..'Z', '0'..'9');
    my $salt = $a[rand(@a)] . $a[rand(@a)];
    return crypt($pw,$salt);
}


sub scan {
    my $host = shift;
    my $info = shift;

    return scan_tcp($host, $info) if $info->[0] =~ /^TCP/;
    return scan_udp($host, $info) if $info->[0] =~ /^UDP/;
    return;
}

sub scan_tcp {
    my $host = shift;
    my $info = shift;

}

sub scan_udp {
    my $host = shift;
    my $info = shift;

}

